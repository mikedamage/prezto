# Mike's Prompt
# by Mike Green
# Adapted from Pure by Sindre Sorhus
# https://github.com/sindresorhus/mike
# MIT License

# For my own and others sanity
# git:
# %b => current branch
# %a => current action (rebase/merge)
# prompt:
# %F => color dict
# %f => reset color
# %~ => current path
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)

# 12-hour clock time
prompt_mike_time_of_day() {
    echo $(date "+%r")
}

# turns seconds into human readable time
# 165392 => 1d 21h 56m 32s
prompt_mike_human_time() {
    local tmp=$1
    local days=$(( tmp / 60 / 60 / 24 ))
    local hours=$(( tmp / 60 / 60 % 24 ))
    local minutes=$(( tmp / 60 % 60 ))
    local seconds=$(( tmp % 60 ))
    (( $days > 0 )) && echo -n "${days}d "
    (( $hours > 0 )) && echo -n "${hours}h "
    (( $minutes > 0 )) && echo -n "${minutes}m "
    echo "${seconds}s"
}

# fastest possible way to check if repo is dirty
prompt_mike_git_dirty() {
    # check if we're in a git repo
    command git rev-parse --is-inside-work-tree &>/dev/null || return
    # check if it's dirty
    command git diff --quiet --ignore-submodules HEAD &>/dev/null

    (($? == 1)) && echo '*'
}

# displays the exec time of the last command if set threshold was exceeded
prompt_mike_cmd_exec_time() {
    local stop=$EPOCHSECONDS
    local start=${cmd_timestamp:-$stop}
    integer elapsed=$stop-$start
    (($elapsed > ${PURE_CMD_MAX_EXEC_TIME:=5})) && prompt_mike_human_time $elapsed
}

prompt_mike_preexec() {
    if (( $+ZLE_STATE )); then
        editor-info
    fi

    cmd_timestamp=$EPOCHSECONDS

    # shows the current dir and executed command in the title when a process is active
    print -Pn "\e]0;"
    echo -nE "$PWD:t: $2"
    print -Pn "\a"
}

# string length ignoring ansi escapes
prompt_mike_string_length() {
    echo ${#${(S%%)1//(\%([KF1]|)\{*\}|\%[Bbkf])}}
}

prompt_mike_precmd() {
    # shows the full path in the title
    print -Pn '\e]0;%~\a'

    # git info
    vcs_info

    local prompt_mike_preprompt='\n[ %F{white}`prompt_mike_time_of_day`%f ] %F{cyan}%~%F{242}$vcs_info_msg_0_`prompt_mike_git_dirty` $prompt_mike_username%f %F{yellow}`prompt_mike_cmd_exec_time`%f'
    print -P $prompt_mike_preprompt

    # check async if there is anything to pull
    (( ${PURE_GIT_PULL:-1} )) && {
        # check if we're in a git repo
        command git rev-parse --is-inside-work-tree &>/dev/null &&
        # check check if there is anything to pull
        command git fetch &>/dev/null &&
        # check if there is an upstream configured for this branch
        command git rev-parse --abbrev-ref @'{u}' &>/dev/null &&
        (( $(command git rev-list --right-only --count HEAD...@'{u}' 2>/dev/null) > 0 )) &&
        # some crazy ansi magic to inject the symbol into the previous line
        print -Pn "\e7\e[A\e[1G\e[`prompt_mike_string_length $prompt_mike_preprompt`C%F{cyan}⇣%f\e8"
    } &!

    # reset value since `preexec` isn't always triggered
    unset cmd_timestamp
}


prompt_mike_setup() {
    # prevent percentage showing up
    # if output doesn't end with a newline
    export PROMPT_EOL_MARK=''

    prompt_opts=(cr subst percent)

    zmodload zsh/datetime
    autoload -Uz add-zsh-hook
    autoload -Uz vcs_info

    add-zsh-hook precmd prompt_mike_precmd
    add-zsh-hook preexec prompt_mike_preexec

    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:git*' formats ' %b'
    zstyle ':vcs_info:git*' actionformats ' %b|%a'

    # show username@host if logged in through SSH
    [[ "$SSH_CONNECTION" != '' ]] && prompt_mike_username='%n@%m '

    zstyle ':prezto:module:editor:info:keymap:alternate' format '<<<ZLE'

    # prompt turns red if the previous command didn't exit with 0
    PROMPT='%(?.%F{magenta}.%F{red})❯%f '
    RPROMPT='%F{green}$editor_info[keymap]%f'
}

prompt_mike_setup "$@"

# vim: set ft=zsh ts=4 sw=4 expandtab :
